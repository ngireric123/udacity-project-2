{"ast":null,"code":"import { LOGOUT, SET_LOGGEDIN_USER, SET_ALL_USERS, GET_ALL_QUESTIONS, QUESTIONS_TO_DISPLAY, ON_HOME, NEW_QUESTION_ID, GET_QUESTIONS_REQUEST, ADD_NEW_ANSWER, ADD_NEW_QUESTION } from './Types';\nimport * as API from '../_DATA';\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nexport const setloggedinuser = user => {\n  return {\n    type: SET_LOGGEDIN_USER,\n    payload: user\n  };\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};\nexport const setAllUsers = users => {\n  return {\n    type: SET_ALL_USERS,\n    payload: users\n  };\n};\nexport const onhome = () => {\n  return {\n    type: ON_HOME\n  };\n};\nexport const getallquestions = users => {\n  return {\n    type: GET_ALL_QUESTIONS,\n    payload: users\n  };\n};\nexport const getquestionsrequest = () => {\n  return {\n    type: GET_QUESTIONS_REQUEST\n  };\n};\nexport const questionstodisplay = value => {\n  return {\n    type: QUESTIONS_TO_DISPLAY,\n    payload: value\n  };\n};\nexport const getUsers = () => {\n  return dispatch => {\n    return API._getUsers().then(response => {\n      dispatch(setAllUsers(response));\n    });\n  };\n};\nexport const getquestions = () => {\n  return dispatch => {\n    dispatch(getquestionsrequest());\n    return API._getQuestions().then(response => {\n      dispatch(getallquestions(response));\n    });\n  };\n};\nexport const new_question_id = value => {\n  return {\n    type: NEW_QUESTION_ID,\n    payload: value\n  };\n};\nexport const add_new_answer = (id, answer, loggedInUser) => {\n  return {\n    type: ADD_NEW_ANSWER,\n    id,\n    answer,\n    loggedInUser\n  };\n};\nexport const handlesubmitanswer = (id, answer) => {\n  return (dispatch, getState) => {\n    const {\n      loggedInUser\n    } = getState();\n    dispatch(showLoading());\n    return API._saveQuestionAnswer({\n      authedUser: loggedInUser,\n      qid: id,\n      answer\n    }).then(() => dispatch(add_new_answer(id, answer, loggedInUser))).then(() => dispatch(hideLoading()));\n  };\n};\nexport const add_new_question = (question, loggedInUser) => {\n  return {\n    type: ADD_NEW_QUESTION,\n    question,\n    loggedInUser\n  };\n};\nexport const handleaddquestion = (option1, option2) => {\n  return (dispatch, getState) => {\n    const {\n      loggedInUser\n    } = getState();\n    dispatch(showLoading());\n    return API._saveQuestion({\n      optionOneText: option1,\n      optionTwoText: option2,\n      author: loggedInUser\n    }).then(question => dispatch(add_new_question(question, loggedInUser))).then(() => dispatch(hideLoading()));\n  };\n};","map":{"version":3,"sources":["/home/eric/Desktop/udacity-project2/udacity_nanodegree_2/src/Redux/Action.js"],"names":["LOGOUT","SET_LOGGEDIN_USER","SET_ALL_USERS","GET_ALL_QUESTIONS","QUESTIONS_TO_DISPLAY","ON_HOME","NEW_QUESTION_ID","GET_QUESTIONS_REQUEST","ADD_NEW_ANSWER","ADD_NEW_QUESTION","API","showLoading","hideLoading","setloggedinuser","user","type","payload","logout","setAllUsers","users","onhome","getallquestions","getquestionsrequest","questionstodisplay","value","getUsers","dispatch","_getUsers","then","response","getquestions","_getQuestions","new_question_id","add_new_answer","id","answer","loggedInUser","handlesubmitanswer","getState","_saveQuestionAnswer","authedUser","qid","add_new_question","question","handleaddquestion","option1","option2","_saveQuestion","optionOneText","optionTwoText","author"],"mappings":"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","sourcesContent":["import {\n    LOGOUT,\n    SET_LOGGEDIN_USER,\n    SET_ALL_USERS,\n    GET_ALL_QUESTIONS,\n    QUESTIONS_TO_DISPLAY,\n    ON_HOME,\n    NEW_QUESTION_ID,\n    GET_QUESTIONS_REQUEST,\n    ADD_NEW_ANSWER,\n    ADD_NEW_QUESTION\n} from './Types'\nimport * as API from '../_DATA'\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\n\nexport const setloggedinuser = (user) => {\n    return {\n        type: SET_LOGGEDIN_USER,\n        payload: user\n    }\n}\nexport const logout = () => {\n    return {\n        type: LOGOUT\n    }\n}\nexport const setAllUsers = (users) => {\n    return {\n        type: SET_ALL_USERS,\n        payload: users\n    }\n}\nexport const onhome = () => {\n    return {\n        type: ON_HOME\n    }\n}\n\nexport const getallquestions = (users) => {\n    return {\n        type: GET_ALL_QUESTIONS,\n        payload: users\n    }\n}\nexport const getquestionsrequest =() =>{\n    return{\n        type: GET_QUESTIONS_REQUEST\n    }\n}\n\nexport const questionstodisplay = (value) => {\n    return {\n        type: QUESTIONS_TO_DISPLAY,\n        payload: value\n    }\n}\nexport const getUsers = () => {\n    return (dispatch) => {\n        return API._getUsers()\n            .then(response => {\n                dispatch(setAllUsers(response))\n            })\n    }\n}\n\nexport const getquestions = () => {\n    return (dispatch) => {\n        dispatch(getquestionsrequest())\n        return API._getQuestions()\n            .then(response => {\n                dispatch(getallquestions(response))\n            })\n    }\n}\n\nexport const new_question_id=(value)=>{\n    return {\n        type: NEW_QUESTION_ID,\n        payload: value\n    }\n}\n\nexport const add_new_answer =(id, answer, loggedInUser)=>{\n    return{\n        type: ADD_NEW_ANSWER,\n        id,\n        answer,\n        loggedInUser\n    }\n}\n\nexport const handlesubmitanswer=(id, answer)=>{\n    return(dispatch, getState) =>{\n        const { loggedInUser } = getState()\n\n        dispatch(showLoading())\n        return API._saveQuestionAnswer({\n            authedUser: loggedInUser,\n            qid: id,\n            answer\n        })\n        .then(() => dispatch(add_new_answer(id, answer, loggedInUser)))\n        .then(() => dispatch(hideLoading()))\n    }\n}\n\nexport const add_new_question =(question, loggedInUser)=>{\n    return{\n        type: ADD_NEW_QUESTION,\n        question,\n        loggedInUser\n    }\n}\n\nexport const handleaddquestion=(option1, option2)=>{\n    return(dispatch, getState) =>{\n        const { loggedInUser } = getState()\n\n        dispatch(showLoading())\n        return API._saveQuestion({\n            optionOneText: option1, \n            optionTwoText: option2, \n            author: loggedInUser\n        })\n        .then((question) => dispatch(add_new_question(question, loggedInUser)))\n        .then(() => dispatch(hideLoading()))\n    }\n}"]},"metadata":{},"sourceType":"module"}